**Experimentierprotokoll zur Modellierung des CO‚ÇÇ-Flusses mit SARIMAX**

## **1. Ziel der Analyse**
Das Ziel dieser Untersuchung ist die **Prognose des CO‚ÇÇ-Flusses** basierend auf meteorologischen und saisonalen Einflussfaktoren. Hierzu wird ein **SARIMAX-Modell** mit einem **3-Stunden-Intervall** entwickelt, getestet und iterativ optimiert.

Die Entwicklung erfolgt auf einem **gek√ºrzten Datensatz** zur **schnelleren Berechnung**. Sobald das optimale Modell gefunden ist, wird der komplette Zeitraum **31.12.2015 - 31.12.2023** f√ºr die finale Modellierung genutzt.

---

## **2. Vorgehen**
Das Modell wurde in mehreren Schritten optimiert, um eine **m√∂glichst hohe Prognoseg√ºte** bei gleichzeitig effizienter Rechenzeit zu erreichen:
- **Datenaggregation auf 3-Stunden-Intervalle**
- **Feature-Engineering (Fourier-Terme, Interaktionen, Standardisierung)**
- **SARIMAX-Modelltraining mit Auto-ARIMA**
- **Evaluierung und Optimierung (z. B. Feature-Analyse, Differenzierung)**
- **Generalit√§tstest durch Backtesting**

---

## **3. Datenvorverarbeitung**
### **3.1 Datensatz und Aggregation**
- **Zeitraum:** 01.01.2018 - 31.12.2021 (Reduzierter Testzeitraum)
- **Datenquelle:** CO‚ÇÇ-Flussdaten (`flux_df`) und meteorologische Daten (`meteorology`)
- **Zeitliche Aggregation:** Daten wurden auf **3-Stunden-Intervalle** reduziert:
  ```python
  df = df.resample('3h').mean()
  ```
- **Speicheroptimierung:** Um RAM-Verbrauch zu minimieren, wurden numerische Werte von `float64` in `float32` konvertiert.

### **3.2 Feature-Engineering**
Folgende Merkmale wurden in das Modell integriert:
- **Saisonale Fourier-Terme** zur Abbildung t√§glicher und j√§hrlicher Muster:
  ```python
  fourier_terms['cos_daily_1'] = np.cos(2 * np.pi * (hours/3) / 8)
  ```
- **Dummy-Variable `is_night`** zur Ber√ºcksichtigung von Tag/Nacht-Effekten:
  ```python
  df['is_night'] = (df['SW_IN'] < 2).astype(np.int8)
  ```
- **Interaktionsvariablen** zwischen Temperatur und Nacht:
  ```python
  df['TA_night'] = df['TA'] * df['is_night']
  ```
- **Standardisierung aller exogenen Variablen**, um unterschiedliche Skalen zu normalisieren.

---

## **4. Modellwahl und Optimierung**
### **4.1 Auswahl des Differenzierungsgrads**
Zur Sicherstellung der Stationarit√§t wurde die optimale Differenzierung ermittelt:
```python
d = ndiffs(y_train, test='adf', max_d=2)
D = nsdiffs(y_train, m=8, test='ocsb', max_D=1)
```
Ergebnis:
- **d = 0**, da die Zeitreihe bereits station√§r ist.
- **D = 1**, um saisonale Trends (8 Lags = 24 Stunden) zu entfernen.

### **4.2 Automatische Modellauswahl mit Auto-ARIMA**
Ein initiales SARIMAX-Modell wurde mit folgendem Parameterraum trainiert:
```python
auto_model = pm.auto_arima(
    y=y_train, X=X_train, seasonal=True, m=8,
    start_p=0, max_p=3, start_q=0, max_q=3,
    start_P=0, max_P=2, start_Q=0, max_Q=2,
    d=d, D=D, trace=True, stepwise=True, n_jobs=4, maxiter=100)
```
Ergebnis:
- **Optimales Modell:** `SARIMAX(1,0,0)x(1,0,2,8)`
- **AIC:** 37413.87 (**niedrig, gute Modellanpassung**)
- **Signifikante Variablen:** `TA`, `SW_IN`, `cos_daily_1`, `sin_daily_1`

### **4.3 Evaluierung des Modells**
Nach der Modellierung wurde das Modell mit Testdaten √ºberpr√ºft:
```python
forecast, conf_int = auto_model.predict(n_periods=len(test_data), X=X_test, return_conf_int=True)
```
**Ergebnisse:**
- **MAE:** 2.0581
- **RMSE:** 2.7986
- **Visualisierung zeigt gute Anpassung, aber leichte Gl√§ttung**

---

## **5. Verbesserungen & Anpassungen**
### **5.1 Identifizierte Probleme**
- **Feature `is_night` hat einen hohen p-Wert (0.93), sollte entfernt werden**
- **Leichte Abweichungen der Residuen von Normalverteilung** ‚Üí Alternative Fehlerverteilung testen
- **Vorhersagen sind gegl√§ttet, m√∂gliche nichtlineare Effekte nicht ber√ºcksichtigt**

### **5.2 Optimierungsschritte**
‚úÖ **Feature `is_night` entfernt, Interaktionsvariablen beibehalten**
‚úÖ **Alternative Fehlerverteilung (`t-Student`) getestet**
‚úÖ **Weitere exogene Variablen evaluiert (Bodenfeuchte, Wind)**
‚úÖ **Nichtlineare Transformationen getestet (log CO‚ÇÇ-Fluss, polynomialer Temperaturterm)**

Ergebnis nach Optimierung:
- **AIC gesunken auf 37410.65**
- **Residualverhalten verbessert**
- **Feature-Wichtigkeit hat sich ge√§ndert (SW_IN st√§rkerer Einfluss)**

---

## **6. Fazit & N√§chste Schritte**
**‚úÖ Optimiertes SARIMAX-Modell gefunden, aber finale Tests auf vollem Datensatz (2015-2023) noch ausstehend.**

**N√§chste Schritte:**
1Ô∏è‚É£ **Finale Modellvalidierung mit vollem Datensatz (2015-2023)**
2Ô∏è‚É£ **Vergleich mit alternativen Methoden (z. B. Prophet, LSTM)**
3Ô∏è‚É£ **Dokumentation der finalen Modellperformance und Interpretation der Einflussfaktoren**

---

üéØ **Dokumentationshinweis:**
Dieses Protokoll dokumentiert alle wichtigen Schritte zur Optimierung des SARIMAX-Modells f√ºr die Masterarbeit und kann direkt in die Methodik/Sektion zur Modellentwicklung √ºbernommen werden.

